name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check formatting
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Run clippy linting
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -W warnings

  # Run tests on multiple platforms
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
      - name: Run tests (default features)
        run: cargo test --workspace
      - name: Run tests (all features)
        run: cargo test --workspace --all-features
      - name: Run tests (prod feature)
        run: cargo test --workspace --no-default-features --features prod
      - name: Run tests (secure feature)
        run: cargo test --workspace --no-default-features --features prod,secure

  # Check that the project builds
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Build (default features)
        run: cargo build --release
      - name: Build (all features)
        run: cargo build --release --all-features
      - name: Build examples
        run: |
          cargo build --example basic
          cargo build --example advanced
      - name: Build examples (prod mode)
        run: |
          cargo build --example basic --no-default-features --features prod
          cargo build --example advanced --no-default-features --features prod,secure

  # Check documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --no-deps --all-features --workspace

  # Check for security vulnerabilities
  security:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Verify minimum supported Rust version
  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@1.100.0  # MSRV from Cargo.toml
      - uses: Swatinem/rust-cache@v2
      - name: Check MSRV
        run: cargo check --all-features --workspace

  # Check that crates can be published
  publish-check:
    name: Publish Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Check bevy_persist_derive
        run: |
          cd bevy_persist_derive
          cargo publish --dry-run
      - name: Check bevy_persist
        run: |
          cd bevy_persist
          # Replace path dependency with version for publish check
          sed -i 's/bevy_persist_derive = { version = "0.1.0", path = "..\/bevy_persist_derive" }/bevy_persist_derive = { version = "0.1.0" }/' Cargo.toml
          cargo package --allow-dirty